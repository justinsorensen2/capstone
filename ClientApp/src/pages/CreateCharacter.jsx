import React, { useState, useEffect } from 'react'
import axios from 'axios'
import { Link, Redirect } from 'react-router-dom'
import RacialBonus from '../components/RacialBonus'

const CreateCharacter = props => {
  const userId = parseInt(props.match.params.id)
  console.log(userId)
  const email = localStorage.getItem('email')

  //set variables to hold user inputs in state
  const [shouldRedirect, setShouldRedirect] = useState(false)
  const [multiClass, setMultiClass] = useState()
  const [characterRace, setCharacterRace] = useState(null)
  const [raceWasSelected, setRaceWasSelected] = useState(false)
  const [character, setCharacter] = useState({})
  const [user, setUser] = useState()
  const [characterAge, setCharacterAge] = useState()
  const [primaryClassLevel, setPrimaryClassLevel] = useState()
  const [secondaryClassLevel, setSecondaryClassLevel] = useState()
  const [alignment, setAlignment] = useState()
  const [newlyCreatedCharId, setNewlyCreatedCharId] = useState()

  //set variables to hold data generated by race
  const [subraceWasSelected, setSubraceWasSelected] = useState(false)
  const [subrace, setSubrace] = useState()
  const [size, setSize] = useState()
  const [speed, setSpeed] = useState()
  const [savingThrowBonuses, setSavingThrowBonuses] = useState()
  const [weaponProficiencies, setWeaponProficiencies] = useState('')
  const [toolProficiencies, setToolProficiencies] = useState({})
  const [skillBonuses, setSkillBonuses] = useState('')
  const [languages, setLanguages] = useState('')
  const [toolProf, setToolProf] = useState('')
  const [additionalRaceBonuses, setAdditionalRaceBonuses] = useState('')
  const [darkvision, setDarkvision] = useState()
  const [subraceWeaponProf, setSubraceWeaponProf] = useState()
  const [subraceArmorProf, setSubraceArmorProf] = useState()
  const [subraceHPBonus, setSubraceHPBonus] = useState()
  const [subraceAdditionalBonus, setSubraceAdditionalBonus] = useState()
  const [
    subraceAbilityScoreIncrease,
    setSubraceAbilityScoreIncrease,
  ] = useState()
  const [racePlural, setRacePlural] = useState('')
  const [abilityScoreIncrease, setAbilityScoreIncrease] = useState()

  useEffect(() => {
    updateSize(characterRace)
    updateRacialBonus(characterRace)
  }, [characterRace])

  const updateSize = characterRace => {
    if (characterRace === 'Gnome' || 'Halfling') {
      setSize('Small')
    } else {
      setSize('Medium')
    }
  }

  useEffect(() => {
    updateSubraceBonus(subrace)
  }, [subraceWasSelected])

  const updateSubrace = e => {
    setSubrace(e.target.value)
    setSubraceWasSelected(true)
  }

  const updateSubraceBonus = subrace => {
    if (subrace === 'Hill Dwarf') {
      setSubraceAbilityScoreIncrease('Wisdom + 1')
      setSubraceHPBonus('HP Max +1, HP Max +1 at every level')
      setSubraceWeaponProf('')
      setSubraceArmorProf('')
      setSubraceAdditionalBonus('')
    } else if (subrace === 'Mountain Dwarf') {
      setSubraceAbilityScoreIncrease('Strength + 2')
      setSubraceHPBonus('')
      setSubraceWeaponProf('')
      setSubraceArmorProf('Light Armor, Medium Armor')
      setSubraceAdditionalBonus('')
    } else if (subrace === 'High Elf') {
      setSubraceAbilityScoreIncrease('Intelligence + 1')
      setSubraceHPBonus('')
      setSubraceWeaponProf('Shortsword, Longsword, Shortbow, Longbow')
      setSubraceArmorProf('')
      setSubraceAdditionalBonus(
        '1. Gain one extra language of your choice. 2. Gain one cantrip of your choice from the wizard spell list.'
      )
    } else if (subrace === 'Wood Elf') {
      setSubraceAbilityScoreIncrease('Wisdom + 1')
      setSubraceHPBonus('')
      setSubraceWeaponProf('Shortsword, Longsword, Shortbow, Longbow')
      setSubraceArmorProf('')
      setSpeed(35)
      setSubraceAdditionalBonus(
        '1. Base Walking speed increases to 35 feet. 2. You can attempt to hide even when you are only lightly obscured by foliage, heavy rain, falling snow, mist, or other natural phenomena.'
      )
    } else if (subrace === 'Lightfoot Halfling') {
      setSubraceAbilityScoreIncrease('Charisma + 1')
      setSubraceHPBonus('')
      setSubraceWeaponProf('')
      setSubraceArmorProf('')
      setSubraceAdditionalBonus(
        'You can attempt to hide even when you are obscured only by a creature one size larger than you.'
      )
    } else if (subrace === 'Stout Halfling') {
      setSubraceAbilityScoreIncrease('Constitution + 1')
      setSubraceHPBonus('')
      setSubraceWeaponProf('')
      setSubraceArmorProf('')
      setSubraceAdditionalBonus(
        '1. You have advantage on saving throws against poison. 2. You have resistance against poison damage.'
      )
    }
  }

  const updateRacialBonus = characterRace => {
    if (characterRace === 'Dwarf') {
      setRacePlural('Dwarves')
      setDarkvision(60)
      setAbilityScoreIncrease('Constitution + 2')
      setSavingThrowBonuses('Advantage on saving throws against poison,')
      setWeaponProficiencies('BattleAxe, Handaxe, Light Hammer, Warhammer,')
      setToolProficiencies({
        toolChoice1: 'Smithing Tools',
        toolChoice2: 'Brewing Supplies',
        toolChoice3: 'Masonry Tools',
      })
      setSkillBonuses(
        'Stonecunning: add double proficiency bonus to any history check related to origin of stonework,'
      )
      setSpeed(25)
      setLanguages('Common, Dwarven,')
      setAdditionalRaceBonuses('')
      setSubrace({
        subrace1: 'Hill Dwarf',
        subrace2: 'Mountain Dwarf',
      })
    } else if (characterRace === null) {
      setRacePlural('')
      setDarkvision(0)
      setAbilityScoreIncrease('')
      setSavingThrowBonuses('')
      setWeaponProficiencies('')
      setToolProficiencies({})
      setSkillBonuses('')
      setSpeed(0)
      setLanguages('')
      setAdditionalRaceBonuses('')
      setSubrace({})
    } else if (characterRace === 'Elf') {
      setRacePlural('Elves')
      setDarkvision(60)
      setAbilityScoreIncrease('Dexterity + 2')
      setSavingThrowBonuses(
        'Advantage on saving throws against being charmed, immunity to magical sleep,'
      )
      setWeaponProficiencies('')
      setToolProficiencies({})
      setSkillBonuses('Proficiency in the Perception skill,')
      setAdditionalRaceBonuses(
        'Trance: going into a deep meditative state for 4 hours provides a Full Rest,'
      )
      setSpeed(30)
      setLanguages('Common, Elvish,')
      setSubrace({
        subrace1: 'High Elf',
        subrace2: 'Wood Elf',
      })
    } else if (characterRace === 'Halfling') {
      setRacePlural('Halflings')
      setDarkvision(0)
      setAbilityScoreIncrease('Dexterity + 2')
      setSavingThrowBonuses('Advantage on saving throws against fear,')
      setWeaponProficiencies('')
      setToolProficiencies({})
      setSkillBonuses('')
      setAdditionalRaceBonuses(
        '1. Lucky: when you roll a 1 on d20 for an attack/ability check/saving throw you can reroll and must use the reroll, 2. Nimble: you can move through the space of any creature that is a size larger than you,'
      )
      setSpeed(25)
      setLanguages('Common, Halfling,')
      setSubrace({
        subrace1: 'Lightfoot Halfling',
        subrace2: 'Stout Halfling',
      })
    } else if (characterRace === 'Human') {
      setRacePlural('Humans')
      setDarkvision(0)
      setAbilityScoreIncrease('All Scores + 1')
      setSavingThrowBonuses('Advantage on saving throws against fear,')
      setWeaponProficiencies('')
      setToolProficiencies({})
      setSkillBonuses('')
      setAdditionalRaceBonuses('')
      setSpeed(30)
      setLanguages('Common,')
      setSubrace({})
    } else if (characterRace === 'Dragonborn') {
    }
  }

  //update character race and set racewasselected to true
  const updateCharacterRace = e => {
    setCharacterRace(e.target.value)
    setRaceWasSelected(true)
  }

  //parse age to int
  const updateCharacterAge = e => {
    setCharacterAge(parseInt(e.target.value))
  }

  //parse primary class level to int
  const updatePrimaryClassLevel = e => {
    setPrimaryClassLevel(parseInt(e.target.value))
  }

  //parse secondary class level to int
  const updateSecondaryClassLevel = e => {
    setSecondaryClassLevel(parseInt(e.target.value))
  }

  //use api to get user
  const getUser = async email => {
    const resp = await axios.get('api/user/profile/' + email)
    if (resp.status === 200) {
      // redirect page to the home
      setUser(resp.data)
    } else {
      //display an error message
      throw new MessageEvent()
    }
  }

  //call useEffect to set user each time email changes
  useEffect(() => {
    getUser(email)
  }, [email])

  //create character data from user inputs
  const updateCharacterData = e => {
    const key = e.target.name
    const value = e.target.value
    setCharacter(prevCharacter => {
      prevCharacter[key] = value
      return prevCharacter
    })
  }

  // //callback data from RacialBonus
  // const racialBonusCallback = racialBonuses => {
  //   setSize(racialBonuses.size)
  //   setLanguages(racialBonuses.languages)
  //   setSubrace(racialBonuses.subrace)
  //   setAdditionalRaceBonuses(racialBonuses.additionalRaceBonuses)
  //   setToolProf(racialBonuses.toolProf)
  //   setSavingThrowBonuses(racialBonuses.savingThrowBonuses)
  //   setSkillBonuses(racialBonuses.skillBonuses)
  //   setSubraceWeaponProf(racialBonuses.subraceWeaponProf)
  //   setSubraceArmorProf(racialBonuses.subraceArmorProf)
  // }

  //axios post to create character
  const createNewCharacter = async e => {
    character.multiClass = multiClass
    character.userId = user.id
    character.characterAge = characterAge
    character.characterRace = characterRace
    character.primaryClassLevel = primaryClassLevel
    character.secondaryClassLevel = secondaryClassLevel
    e.preventDefault()
    const resp = await axios.post(
      'api/character/create',
      character
      // { userProfile }
    )
    if (resp.status === 200 || resp.status === 201) {
      // redirect page to the stat creator
      console.log(resp.data)
      setNewlyCreatedCharId(resp.data.id)

      setShouldRedirect(true)
    } else {
      //display an error message
      throw new MessageEvent()
    }
  }

  //render
  if (shouldRedirect) {
    return (
      <Redirect
        to={{
          pathname: `/CreateStat/${newlyCreatedCharId}`,
          state: { who: user },
        }}
      />
    )
  }
  return (
    <div>
      <article className="Create-Char-Flex">
        <section className="Create-Char-Parent">
          <div className="Create-Char">
            <form className="Create-Char-Form" onSubmit={createNewCharacter}>
              <div className="Site-Icon" />
              <h3>Fill in your character's details.</h3>
              <h5>
                First Name:
                <input
                  name="characterFirst"
                  type="text"
                  onChange={updateCharacterData}
                />
              </h5>
              <h5>
                Last Name:
                <input
                  name="characterLast"
                  type="text"
                  onChange={updateCharacterData}
                />
              </h5>
              <h5>
                Alignment:
                <select
                  className="Char-Alignment"
                  name="alignment"
                  type="text"
                  onChange={updateCharacterData}
                >
                  <option value={null}>{''}</option>
                  <option value="LG">LG - Lawful Good</option>
                  <option value="NG">NG - Neutral Good</option>
                  <option value="CG">CG - Chaotic Good</option>
                  <option value="LN">LN - Lawful Neutral</option>
                  <option value="N">N - True Neutral</option>
                  <option value="CN">CN - Chaotic Neutral</option>
                  <option value="LE">LE - Lawful Evil</option>
                  <option value="NE">NE - Neutral Evil</option>
                  <option value="CE">CE - Chaotic Evil</option>
                </select>
              </h5>
              <h5>
                Age:
                <input
                  name="characterAge"
                  type="number"
                  onChange={updateCharacterAge}
                />
              </h5>
              <h5>
                Race:
                <select
                  className="Char-Race"
                  name="characterRace"
                  type="text"
                  onChange={updateCharacterRace}
                >
                  <option value={null}>{''}</option>
                  <option value="Dragonborn">Dragonborn</option>
                  <option value="Dwarf">Dwarf</option>
                  <option value="Elf">Elf</option>
                  <option value="Gnome">Gnome</option>
                  <option value="Half-Elf">Half-Elf</option>
                  <option value="Halfling">Halfling</option>
                  <option value="Half-Orc">Half-Orc</option>
                  <option value="Human">Human</option>
                  <option value="Tiefling">Tiefling</option>
                </select>
              </h5>
              {raceWasSelected === true ? (
                <div className="Race-Bonus-Parent">
                  <div className="Race-Bonus">
                    <h5>
                      {racePlural} have the following attributes:<br></br>
                      1. Racial Ability Score Increase: {abilityScoreIncrease}
                      <br></br>
                      2. Size: {size}
                      <br></br>
                      3. Speed: {speed}ft.<br></br>
                      4. Darkvision: {darkvision} ft.<br></br>
                      5. Saving Throw Bonuses: {savingThrowBonuses}
                      <br></br>
                      6. Weapon Proficiency: {weaponProficiencies}
                      <br></br>
                      7. Tool Proficiency:
                      {toolProficiencies === {} ? (
                        <>
                          {' '}
                          <div>N/A</div>
                        </>
                      ) : (
                        <>
                          Choose one of:
                          <input
                            className="Tool-Prof"
                            name="toolProficiency"
                            type="radio"
                            value={toolProficiencies.toolChoice1}
                            onChange={e => setToolProf(e.target.value)}
                          >
                            {' '}
                            {toolProficiencies.toolChoice1}{' '}
                          </input>
                          <input
                            className="Tool-Prof"
                            name="toolProficiency"
                            type="radio"
                            value={toolProficiencies.toolChoice2}
                            onChange={e => setToolProf(e.target.value)}
                          >
                            {' '}
                            {toolProficiencies.toolChoice2}{' '}
                          </input>
                          <input
                            className="Tool-Prof"
                            name="toolProficiency"
                            type="radio"
                            value={toolProficiencies.toolChoice3}
                            onChange={e => setToolProf(e.target.value)}
                          >
                            {' '}
                            {toolProficiencies.toolChoice3}{' '}
                          </input>
                        </>
                      )}
                      8. Skill Bonus(es): {skillBonuses}
                      <br></br>
                      {characterRace === 'Human' ||
                      'Half-Elf' ||
                      subrace === 'High Elf' ? (
                        <>
                          <div className="Get-Additional">
                            9. Your base languages are: {languages} <br></br>{' '}
                            You will select another language further on.
                          </div>
                        </>
                      ) : (
                        <>
                          <div className="Base-Languages">
                            9. Languages: {languages}
                          </div>
                        </>
                      )}
                      <br></br>
                      10. Additional Racial Bonus(es): {additionalRaceBonuses}
                      {characterRace === 'Elf' ||
                      'Dwarf' ||
                      'Gnome' ||
                      'Halfling' ? (
                        <>
                          11. Select one of the following {characterRace}{' '}
                          subraces:
                          <input
                            className="subrace"
                            name="subrace1"
                            type="radio"
                            value={subrace.subrace1}
                            onChange={updateSubrace}
                          >
                            {' '}
                            {subrace.subrace1}{' '}
                          </input>
                          <input
                            className="subrace"
                            name="subrace2"
                            type="radio"
                            value={subrace.subrace2}
                            onChange={updateSubrace}
                          >
                            {' '}
                            {subrace.subrace2}{' '}
                          </input>
                        </>
                      ) : (
                        <></>
                      )}
                      {subrace === '' ? (
                        <> </>
                      ) : (
                        <>
                          <div className="Subrace-Bonuses">
                            <h5>
                              A {subrace} gains the following additional
                              <br></br>
                              bonuses:<br></br>
                              Stats: {subraceAbilityScoreIncrease}
                              Subrace HP Bonus: {subraceHPBonus}
                              Subrace Weapon Proficiencies: {subraceWeaponProf}
                              Subrace Armor Proficiencies: {subraceArmorProf}
                              Subrace Additional Bonus(es):{' '}
                              {subraceAdditionalBonus}
                            </h5>
                          </div>
                        </>
                      )}
                    </h5>
                  </div>
                </div>
              ) : (
                <></>
              )}
              <h5>Size: {size}</h5>
              <h5>
                Class:
                <select
                  className="Char-Class"
                  name="characterClass"
                  type="text"
                  onChange={updateCharacterData}
                >
                  <option value={null}>{''}</option>
                  <option value="Barbarian">Barbarian</option>
                  <option value="Bard">Bard</option>
                  <option value="Cleric">Cleric</option>
                  <option value="Druid">Druid</option>
                  <option value="Fighter">Fighter</option>
                  <option value="Monk">Monk</option>
                  <option value="Paladin">Paladin</option>
                  <option value="Ranger">Ranger</option>
                  <option value="Rogue">Rogue</option>
                  <option value="Sorcerer">Sorcerer</option>
                  <option value="Warlock">Warlock</option>
                  <option value="Wizard">Wizard</option>
                </select>
              </h5>
              <h5>
                Class Level:
                <input
                  name="primaryClassLevel"
                  type="number"
                  onChange={updatePrimaryClassLevel}
                />
              </h5>
              <h5>
                Multi-Class?
                <input
                  className="Multi-Class"
                  name="multiClass"
                  type="radio"
                  checked={multiClass === true}
                  onChange={e => setMultiClass(true)}
                />{' '}
                Yes
                <input
                  className="Multi-Class"
                  name="multiClass"
                  type="radio"
                  checked={multiClass === false}
                  onChange={e => setMultiClass(false)}
                />{' '}
                No
              </h5>
              {multiClass === false ? (
                <>
                  <h5>Secondary Class: N/A</h5>
                  <h5>Secondary Class Level: N/A</h5>
                </>
              ) : (
                <>
                  <h5>
                    Secondary Class:
                    <select
                      className="Char-Class"
                      name="secondaryClass"
                      type="text"
                      onChange={updateCharacterData}
                    >
                      <option value={null}>{''}</option>
                      <option value="Barbarian">Barbarian</option>
                      <option value="Bard">Bard</option>
                      <option value="Cleric">Cleric</option>
                      <option value="Druid">Druid</option>
                      <option value="Fighter">Fighter</option>
                      <option value="Monk">Monk</option>
                      <option value="Paladin">Paladin</option>
                      <option value="Ranger">Ranger</option>
                      <option value="Rogue">Rogue</option>
                      <option value="Sorcerer">Sorcerer</option>
                      <option value="Warlock">Warlock</option>
                      <option value="Wizard">Wizard</option>
                    </select>
                  </h5>
                  <h5>
                    Secondary Class Level:
                    <input
                      name="secondaryClassLevel"
                      type="number"
                      onChange={updateSecondaryClassLevel}
                    />
                  </h5>
                </>
              )}
              <div className="Char-Languages">
                {characterRace === 'Human' || 'Half-Elf' ? (
                  <>
                    <div className="Char-Languages-Parent">
                      <h5>Add additional Languages</h5>
                      <input
                        type="text area"
                        name="languages"
                        className="Add-Languages"
                        defaultValue={languages}
                        onChange={e => setLanguages(e.target.value)}
                      />
                    </div>
                  </>
                ) : (
                  <>
                    <div className="Char-Languages-Parent">
                      Languages: {languages}
                    </div>
                  </>
                )}
              </div>
              <div className="Char-Personality-Traits">
                <h5>Personality Traits:</h5>
                <div className="Personality-Traits-Parent">
                  <input
                    type="text area"
                    name="personalityTraits"
                    className="Personality-Traits"
                    onChange={updateCharacterData}
                  />
                </div>
              </div>
              <div className="Char-Ideals">
                <h5>Ideals:</h5>
                <div className="Ideals-Parent">
                  <input
                    name="ideals"
                    type="text area"
                    className="Ideals"
                    onChange={updateCharacterData}
                  />
                </div>
              </div>
              <div className="Char-Bonds">
                <h5>Bonds:</h5>
                <div className="Bonds-Parent">
                  <input
                    name="bonds"
                    type="text area"
                    className="Bonds"
                    onChange={updateCharacterData}
                  />
                </div>
              </div>
              <div className="Char-Flaws">
                <h5>Flaws:</h5>
                <div className="Flaws-Parent">
                  <input
                    name="flaws"
                    type="text area"
                    className="Flaws"
                    onChange={updateCharacterData}
                  />
                </div>
              </div>
              <div className="Char-Features-Traits">
                <h5>Features and Traits:</h5>
                <div className="Features-Traits-Parent">
                  <input
                    name="featuresTraits"
                    type="text area"
                    className="Features-Traits"
                    defaultValue={additionalRaceBonuses}
                    onChange={updateCharacterData}
                  />
                </div>
              </div>
              <div className="Char-BackStory">
                <h5>Backstory:</h5>
                <div className="BackStory-Parent">
                  <input
                    name="backStory"
                    type="text area"
                    className="BackStory"
                    onChange={updateCharacterData}
                  />
                </div>
              </div>
              <div className="Char-Allies-Orgs">
                <h5>Allies and Organizations:</h5>
                <div className="Allies-Orgs-Parent">
                  <input
                    name="alliesOrganizations"
                    type="text area"
                    className="Allies-Orgs"
                    onChange={updateCharacterData}
                  />
                </div>
              </div>
              <div className="Char-Other-Proficiencies">
                <h5>Other Proficiencies:</h5>
                <div className="Other-Proficiencies-Parent">
                  <input
                    name="otherProficiencies"
                    type="text area"
                    defaultValue={
                      { toolProf } +
                      { savingThrowBonuses } +
                      { skillBonuses } +
                      { subraceWeaponProf } +
                      { subraceArmorProf } +
                      { additionalRaceBonuses }
                    }
                    className="Other-Proficiencies"
                    onChange={updateCharacterData}
                  />
                </div>
              </div>
              <div className="Char-Treasure">
                <h5>Treasure:</h5>
                <div className="Treasure-Parent">
                  <input
                    name="treasure"
                    type="text area"
                    className="Treasure"
                    onChange={updateCharacterData}
                  />
                </div>
              </div>
              <div className="Create-Char-Button-Div">
                <button
                  className="Create-Char-Button"
                  onClick={createNewCharacter}
                >
                  Submit
                </button>
              </div>
            </form>
          </div>
        </section>
      </article>
    </div>
  )
}

export default CreateCharacter
